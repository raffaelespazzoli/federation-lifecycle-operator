# namespace
- apiVersion: v1
  kind: Namespace
  metadata:
    name: shglb-{{ .Instance.ObjectMeta.Name }}

#etcd operator
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: etcd-operator
    labels:
      app: etcd-operator
  rules:
  - apiGroups:
    - etcd.database.coreos.com
    resources:
    - etcdclusters
    - etcdbackups
    - etcdrestores
    verbs:
    - "*"
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - "*"
  - apiGroups:
    - ""
    resources:
    - pods
    - services
    - endpoints
    - persistentvolumeclaims
    - events
    verbs:
    - "*"
  - apiGroups:
    - apps
    resources:
    - deployments
    verbs:
    - "*"
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: etcd-operator
    labels:
      app: etcd-operator
  subjects:
  - kind: ServiceAccount
    name: etcd-operator
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: etcd-operator
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: etcd-operator
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
    labels:
      app: etcd-operator
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: etcd-operator
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
    labels:
      app: etcd-operator
  spec:
    selector:
      matchLabels:
        app: etcd-operator
    replicas: 1
    template:
      metadata:
        name: etcd-operator
        labels:
          app: etcd-operator
      spec:
        serviceAccountName: etcd-operator
        containers:
        - name: etcd-operator
          image: "quay.io/coreos/etcd-operator:v0.9.3"
          imagePullPolicy: IfNotPresent
          command:
          - etcd-operator
          env:
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          livenessProbe:
            httpGet:
              path: /readyz
              port: 8080
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8080
# etcd
- apiVersion: "etcd.database.coreos.com/v1beta2"
  kind: "EtcdCluster"
  metadata:
    name: coredns-etcd
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
  spec:
    size: 3
# coredns
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    name: coredns
    labels:
      app: coredns
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    - services
    - pods
    - namespaces
    verbs:
    - list
    - watch
  - apiGroups:
    - policy
    - extensions
    resources:
    - podsecuritypolicies
    verbs:
    - use
    resourceNames:
    - coredns
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    name: coredns
    labels:
      app: coredns
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: coredns
  subjects:
  - kind: ServiceAccount
    name: coredns
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
- apiVersion: extensions/v1beta1
  kind: PodSecurityPolicy
  metadata:
    name: coredns
    labels:
      app: coredns
  spec:
    privileged: false
    # Required to prevent escalations to root.
    allowPrivilegeEscalation: false
    # Add back CAP_NET_BIND_SERVICE so that coredns can run on port 53
    allowedCapabilities:
    - CAP_NET_BIND_SERVICE
      # Allow core volume types.
    volumes:
      - 'configMap'
      - 'emptyDir'
      - 'projected'
      - 'secret'
      - 'downwardAPI'
    hostNetwork: false
    hostIPC: false
    hostPID: false
    runAsUser:
      # Require the container to run without root privileges.
      rule: 'RunAsAny'
    seLinux:
      # This policy assumes the nodes are using AppArmor rather than SELinux.
      rule: 'RunAsAny'
    supplementalGroups:
      rule: 'MustRunAs'
      ranges:
        # Forbid adding the root group.
        - min: 1
          max: 65535
    fsGroup:
      rule: 'MustRunAs'
      ranges:
        # Forbid adding the root group.
        - min: 1
          max: 65535
    readOnlyRootFilesystem: false
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: coredns
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
    labels:
      app: coredns
- apiVersion: v1
  kind: Service
  metadata:
    name: coredns
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
    labels:
      app: coredns
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9153"
  spec:
    selector:
      app: coredns
    ports:
      - port: 53
        protocol: UDP
        targetPort: 8053
    type: ClusterIP
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: coredns-config
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
  data:
    Corefile: |-
      .:8053 {
        cache 30
        errors
        health
{{ $currentNamespace:= printf "shglb-%s" .Instance.ObjectMeta.Name }}        
{{ range .Instance.Spec.NamespaceFederationSpec.Domains }}        
        etcd {{ . }} {
          stubzones
          path /skydns
          endpoint http://coredns-etcd-client.{{ $currentNamespace }}.svc:2379
        }
{{ end }}        
        prometheus 0.0.0.0:9153
        proxy . /etc/resolv.conf
        loadbalance round_robin
      }
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: coredns
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
    labels:
      app: coredns
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: coredns
    template:
      metadata:
        labels:
          app: coredns
      spec:
        serviceAccountName: coredns
        containers:
        - name: "coredns"
          image: "coredns/coredns:1.3.1"
          imagePullPolicy: IfNotPresent
          args: [ "-conf", "/etc/coredns/Corefile" ]
          volumeMounts:
          - name: config-volume
            mountPath: /etc/coredns
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
        volumes:
          - name: config-volume
            configMap:
              name: coredns-config
              items:
              - key: Corefile
                path: Corefile    

# external-dns
# TODO fix this config
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: external-dns-kubeconfig
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
  data:
    kubeconfig: |-
      apiVersion: v1
      kind: Config
      clusters:
      - name: control-cluster
        cluster:
          certificate-authority-data: '{{ encode64 (printf "%s" (index .Secret.Data "ca.crt")) }}'
          server: {{ .Instance.Spec.GlobalLoadBalancer.ControllerURL }}
      contexts:
      - name: control-cluster
        context:
          cluster: control-cluster
          user: control-cluster
      current-context: control-cluster
      users:
      - name: control-cluster
        user:
          token: {{ printf "%s" (.Secret.Data.token) }}       
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: external-dns
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: external-dns
    namespace: shglb-{{ .Instance.ObjectMeta.Name }}
  spec:
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: external-dns
      spec:
        containers:
        - name: external-dns
          image: registry.opensource.zalan.do/teapot/external-dns:latest
          args: 
          - --provider=coredns         
          - --registry=txt 
          - --txt-owner-id={{ .Instance.ObjectMeta.Name }} 
          - --source=crd 
          - --crd-source-apiversion=multiclusterdns.federation.k8s.io/v1alpha1 
          - --crd-source-kind=DNSEndpoint
          - --kubeconfig=/etc/external-dns/kubeconfig
          env:
          - name: ETCD_URLS
            value: http://coredns-etcd-client.shglb-{{ .Instance.ObjectMeta.Name }}.svc:2379
          volumeMounts:
          - name: kubeconfig
            mountPath: /etc/external-dns
        volumes:
        - name: kubeconfig
          configMap:
            name: external-dns-kubeconfig  
        serviceAccountName: external-dns                                 